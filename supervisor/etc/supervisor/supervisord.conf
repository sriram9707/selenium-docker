[supervisord]
;nodaemon=true is useful when running supervisor in docker so we
;can immediately attach docker to supervisor stdout/stderr
nodaemon=true

;main log file;default $CWD/supervisord.log
logfile=%(ENV_LOGS_DIR)s/supervisord.log

;max main logfile bytes b4 rotation;default 50MB
logfile_maxbytes=%(ENV_LOGFILE_MAXBYTES)s

;num of main logfile rotation backups;default 10
logfile_backups=%(ENV_LOGFILE_BACKUPS)s

;log level; default=info; options: debug,warn,trace
;debug will log all monitored process outputs
;an alternative to debug would be to tail all logs
;and pipe `ts` to inject the timestamp:
; tail -f %(ENV_LOGS_DIR)s/*.log --pid.... | ts
loglevel=%(ENV_LOG_LEVEL)s

;supervisord pidfile;default supervisord.pid
pidfile=%(ENV_SUPERVISOR_PIDFILE)s

;'AUTO' child log dir, default $TEMP
childlogdir=%(ENV_LOGS_DIR)s

;The number of seconds to wait for the OS to return a SIGCHILD to
;supervisord after the program has been sent a stopsignal.
;If this number of seconds elapses before supervisord receives a SIGCHILD
;from the process, supervisord will attempt to kill it with a final.
;default=10
stopwaitsecs=%(ENV_SUPERVISOR_STOPWAITSECS)s

;The signal used to kill the program when a stop is requested.
;This can be any of TERM, HUP, INT, QUIT, KILL, USR1, or USR2.
;Default: TERM. Required: No. Introduced: 3.0
stopsignal=%(ENV_SUPERVISOR_STOPSIGNAL)s

;If true, when resorting to send SIGKILL to the program to terminate it
;send it to its whole process group instead, taking care of its children
;as well, useful e.g with Python programs using multiprocessing.
;Default: false. Required: No. Introduced: 3.0a11
killasgroup=%(ENV_SUPERVISOR_KILLASGROUP)s

;If true, the flag causes supervisor to send the stop signal to the
;whole process group and implies killasgroup is true.
;This is useful for programs, such as Flask in debug mode,
;that do not propagate stop signals to their children,
;leaving them orphaned.
;Default: false. Required: No. Introduced: 3.0b1
stopasgroup=%(ENV_SUPERVISOR_STOPASGROUP)s

[unix_http_server]
file=%(ENV_RUN_DIR)s/supervisor.sock
username=%(ENV_SUPERVISOR_HTTP_USERNAME)s
password=%(ENV_SUPERVISOR_HTTP_PASSWORD)s
;sockef file mode (default 0700)
chmod=0700

; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
; use a unix:// URL  for a unix socket
serverurl=unix://%(ENV_RUN_DIR)s/supervisor.sock
username=%(ENV_SUPERVISOR_HTTP_USERNAME)s
password=%(ENV_SUPERVISOR_HTTP_PASSWORD)s

; The [include] section can just contain the "files" setting.  This
; setting can list multiple files (separated by whitespace or
; newlines).  It can also contain wildcards.  The filenames are
; interpreted as relative to this file.  Included files *cannot*
; include files themselves.

;making port, username and password configurable via shell environment vars
;if no inet_http_server section then the inet HTTP server won't be started
[inet_http_server]
;Note to listen on all interfaces in the machine, use :9001 or *:9001
;Note to listen only on localhost interface use 127.0.0.1:9001
port=127.0.0.1:%(ENV_SUPERVISOR_HTTP_PORT)s
username=%(ENV_SUPERVISOR_HTTP_USERNAME)s
password=%(ENV_SUPERVISOR_HTTP_PASSWORD)s
;WARNING: Seems broken in current master branch:
;getting: TypeError: 'bool' object is not callable

[include]
files = /etc/supervisor/conf.d/*.conf
